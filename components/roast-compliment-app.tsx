"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Flame, Heart, Sparkles, ThumbsUp, ThumbsDown, ToggleLeft, ToggleRight, User, Loader2, BarChart3 } from "lucide-react"
import { GlitchText } from "./glitch-text"
import { ParticleBackground } from "./particle-background"
import { LimitModal } from "./limit-modal"
import { TypingText } from "./typing-text"
import { generateViaAI } from "@/lib/utils"
import { useAnalytics } from "@/hooks/use-analytics"

const roasts = [
  "Tu es comme une mise √† jour logicielle - personne ne te veut, mais tu continues d'appara√Ætre quand m√™me.",
  "Je t'expliquerais bien, mais j'ai oubli√© mes crayons √† la maison.",
  "Tu n'es pas stupide, tu as juste de la malchance quand tu penses.",
  "Si tu √©tais plus consanguin, tu serais un sandwich.",
  "Tu es comme un nuage - quand tu disparais, c'est une belle journ√©e.",
  "Je ne dis pas que tu es b√™te, mais tu aurais du mal √† vider l'eau d'une botte avec les instructions sur le talon.",
  "Tu es la raison pour laquelle ils mettent des instructions sur les bouteilles de shampoing.",
  "Si les cerveaux √©taient de la dynamite, tu n'en aurais pas assez pour te moucher.",
  "Tu es comme un crayon cass√© - compl√®tement inutile.",
  "Je serais d'accord avec toi, mais alors nous aurions tous les deux tort.",
  "Tu es tellement lent que m√™me les escargots te d√©passent en sprint.",
  "Ton QI est si bas qu'il fait de l'ombre aux pissenlits.",
  "Tu es comme un GPS qui te fait tourner en rond dans un parking vide.",
  "Si la stupidit√© √©tait un sport, tu serais champion du monde depuis 10 ans.",
  "Tu es tellement nul que m√™me les mauvaises herbes poussent mieux que toi.",
  "Ton cerveau a la densit√© d'un marshmallow dans un micro-ondes.",
  "Tu es comme un antivirus qui d√©tecte tout sauf les vrais probl√®mes.",
  "Si l'incomp√©tence √©tait de l'√©lectricit√©, tu pourrais alimenter une ville enti√®re.",
  "Tu es tellement inutile que m√™me les spams te bloquent.",
  "Ton existence est une preuve vivante que l'√©volution peut faire marche arri√®re.",
]

const compliments = [
  "Tu as une √©nergie incroyable qui illumine chaque pi√®ce dans laquelle tu entres !",
  "Ta cr√©ativit√© et ta perspective unique rendent le monde plus int√©ressant.",
  "Tu as cette capacit√© incroyable de faire en sorte que tous ceux qui t'entourent se sentent valoris√©s et entendus.",
  "Ta gentillesse et ton empathie sont vraiment inspirantes - tu fais que les gens se sentent moins seuls.",
  "Tu as un esprit si brillant et la fa√ßon dont tu r√©sous les probl√®mes est vraiment impressionnante.",
  "Ton sens de l'humour est absolument d√©licieux et √©gaye toujours la journ√©e des gens.",
  "Tu es incroyablement r√©silient et ta force face aux d√©fis est admirable.",
  "Ta passion pour la vie est contagieuse et motive les autres √† poursuivre leurs r√™ves.",
  "Tu as ce merveilleux don de voir le meilleur chez les gens et dans les situations.",
  "Ton authenticit√© est rafra√Æchissante - tu es vraiment toi-m√™me et c'est magnifique.",
  "Ta vuln√©rabilit√© et ton courage d'√™tre authentique inspirent les autres √† faire de m√™me.",
  "Tu as cette rare capacit√© de transformer les moments difficiles en opportunit√©s de croissance.",
  "Ton intelligence √©motionnelle est remarquable - tu comprends les gens au-del√† des mots.",
  "Tu es un phare de positivit√© dans un monde qui en a tant besoin.",
  "Ta capacit√© √† √©couter sans jugement fait de toi une personne rare et pr√©cieuse.",
  "Tu as ce don incroyable de voir la beaut√© l√† o√π d'autres ne voient que l'ordinaire.",
  "Ton optimisme contagieux redonne espoir √† ceux qui en ont perdu.",
  "Tu es une source d'inspiration constante par ta fa√ßon de surmonter les obstacles.",
  "Ta sagesse int√©rieure transpara√Æt dans chaque interaction que tu as avec les autres.",
  "Tu es un exemple vivant de ce que signifie vivre avec le c≈ìur ouvert et l'√¢me g√©n√©reuse.",
]

export function RoastComplimentApp() {
  const [currentMessage, setCurrentMessage] = useState("")
  const [messageType, setMessageType] = useState<"roast" | "compliment" | null>(null)
  const [isAnimating, setIsAnimating] = useState(false)
  const [isGenerating, setIsGenerating] = useState(false)
  const [reactions, setReactions] = useState<{ [key: string]: "like" | "dislike" | null }>({})
  const [username, setUsername] = useState("")
  const [mode, setMode] = useState<"roast" | "compliment">("roast")
  const [showLimitModal, setShowLimitModal] = useState(false)
  
  // Firebase Analytics
  const { trackRoastGeneration, trackComplimentGeneration, trackModeSwitch, trackReaction, trackAILimitReached } = useAnalytics()

  const getRandomMessage = (type: "roast" | "compliment") => {
    const messages = type === "roast" ? roasts : compliments
    let message = messages[Math.floor(Math.random() * messages.length)]

    if (username.trim()) {
      if (type === "roast") {
        message = message.replace(/Tu es|Tu as|Tu n'es pas|Je t'|tu es|tu as|tu n'es pas|je t'|Ton|ton/g, (match) => {
          const replacements: { [key: string]: string } = {
            "Tu es": `${username}, tu es`,
            "Tu as": `${username}, tu as`,
            "Tu n'es pas": `${username}, tu n'es pas`,
            "Je t'": `${username}, je t'`,
            "tu es": `${username}, tu es`,
            "tu as": `${username}, tu as`,
            "tu n'es pas": `${username}, tu n'es pas`,
            "je t'": `${username}, je t'`,
            Ton: `${username}, ton`,
            ton: `${username}, ton`,
          }
          return replacements[match] || match
        })
      } else {
        message = message.replace(/Tu as|Tu es|Ta |Ton |tu as|tu es|ta |ton /g, (match) => {
          const replacements: { [key: string]: string } = {
            "Tu as": `${username}, tu as`,
            "Tu es": `${username}, tu es`,
            "Ta ": `${username}, ta `,
            "Ton ": `${username}, ton `,
            "tu as": `${username}, tu as`,
            "tu es": `${username}, tu es`,
            "ta ": `${username}, ta `,
            "ton ": `${username}, ton `,
          }
          return replacements[match] || match
        })
      }
    }

    return message
  }

  const handleButtonClick = async (type: "roast" | "compliment") => {
    setIsAnimating(true)
    setIsGenerating(true)
    setMessageType(type)
    
    console.log('ü§ñ Tentative g√©n√©ration IA...')
    
    try {
      // Essayer d'abord l'IA c√¥t√© serveur, puis fallback local
      const aiText = await generateViaAI({
        mode: type,
        intensity: "spicy",
        context: "general", 
        target: username,
        safeMode: false, // Pas de censure pour les roasts hardcore
        language: "fr"
      })
      
      if (aiText) {
        console.log('‚úÖ IA a g√©n√©r√©:', aiText)
        const message = aiText
        setCurrentMessage(message)
        
        // Track successful generation
        if (type === "roast") {
          trackRoastGeneration(username || undefined)
        } else {
          trackComplimentGeneration(username || undefined)
        }
      } else {
        console.log('‚ùå IA √©chou√©e, utilisation des templates locaux')
        const message = getRandomMessage(type)
        setCurrentMessage(message)
        
        // Track fallback generation
        if (type === "roast") {
          trackRoastGeneration(username || undefined)
        } else {
          trackComplimentGeneration(username || undefined)
        }
      }
    } catch (error) {
      console.log('‚ùå Erreur IA, affichage du modal de limite')
      setShowLimitModal(true)
      trackAILimitReached()
    }
    
    setIsAnimating(false)
    setIsGenerating(false)
  }

  const handleReaction = (messageId: string, reaction: "like" | "dislike") => {
    setReactions((prev) => ({
      ...prev,
      [messageId]: prev[messageId] === reaction ? null : reaction,
    }))
    
    // Track reaction
    if (messageType) {
      trackReaction(messageType, reaction)
    }
  }

  const toggleMode = () => {
    const newMode = mode === "roast" ? "compliment" : "roast"
    setMode(newMode)
    setCurrentMessage("")
    setMessageType(null)
    
    // Track mode switch
    trackModeSwitch(newMode)
  }

  const messageId = `${messageType}-${currentMessage.slice(0, 20)}`

  return (
    <>
      <div
        className={`min-h-screen flex flex-col items-center justify-center p-4 relative overflow-hidden transition-all duration-700 ease-in-out ${mode === "roast" ? "roast-mode" : "compliment-mode"}`}
      >
        {/* Enhanced particle background */}
        <ParticleBackground mode={mode} />
        
        {/* Static floating icons with enhanced animations */}
        <div className="absolute inset-0 overflow-hidden pointer-events-none">
          {mode === "roast" ? (
            <>
              <div className="absolute top-20 left-10 animate-float-slow transition-opacity duration-700">
                <Flame className="w-6 h-6 text-primary/40 neon-text" />
              </div>
              <div
                className="absolute top-40 right-20 animate-float transition-opacity duration-700"
                style={{ animationDelay: "1s" }}
              >
                <Flame className="w-8 h-8 text-primary/30 neon-text" />
              </div>
              <div
                className="absolute bottom-32 left-20 animate-float-slow transition-opacity duration-700"
                style={{ animationDelay: "2s" }}
              >
                <Flame className="w-7 h-7 text-primary/35 neon-text" />
              </div>
            </>
          ) : (
            <>
              <div className="absolute top-20 left-10 animate-float-slow transition-opacity duration-700">
                <Heart className="w-6 h-6 text-primary/40 neon-text" />
              </div>
              <div
                className="absolute top-40 right-20 animate-float transition-opacity duration-700"
                style={{ animationDelay: "1s" }}
              >
                <Sparkles className="w-8 h-8 text-accent/50 neon-text" />
              </div>
              <div
                className="absolute bottom-32 left-20 animate-float-slow transition-opacity duration-700"
                style={{ animationDelay: "2s" }}
              >
                <Heart className="w-7 h-7 text-secondary/45 neon-text" />
              </div>
            </>
          )}
        </div>

      <div className="max-w-2xl w-full space-y-8 relative z-10">
        <div className="text-center space-y-4">
          <div className="flex items-center justify-center gap-4 mb-6">
            <Button
              onClick={toggleMode}
              variant="outline"
              size="sm"
              className={`flex items-center gap-2 transition-all duration-300 hover:scale-105 hover-lift ${
                mode === "roast" 
                  ? "bg-transparent border-red-500/50 text-red-400 hover:border-red-400 hover-glow" 
                  : "bg-transparent border-green-500/50 text-green-400 hover:border-green-400 hover-glow-green"
              }`}
            >
              {mode === "roast" ? (
                <>
                  <ToggleLeft className="w-4 h-4" />
                  Mode Roast
                </>
              ) : (
                <>
                  <ToggleRight className="w-4 h-4" />
                  Mode Compliment
                </>
              )}
            </Button>
            
            <Button
              onClick={() => window.open('/analytics', '_blank')}
              variant="outline"
              size="sm"
              className="flex items-center gap-2 transition-all duration-300 hover:scale-105 hover-lift bg-transparent border-blue-500/50 text-blue-400 hover:border-blue-400"
            >
              <BarChart3 className="w-4 h-4" />
              Analytics
            </Button>
          </div>

          <h1
            className={`text-5xl font-bold text-balance transition-all duration-700 neon-text ${
              mode === "roast" ? "text-red-400" : "text-green-400"
            }`}
          >
            <GlitchText
              text={mode === "roast" ? "Roast Me" : "Compliment Me"}
              className="transition-colors duration-700"
            />
          </h1>

          <p
            className={`text-lg text-muted-foreground text-pretty transition-all duration-700 ${
              mode === "roast" ? "text-red-300/80" : "text-green-300/80"
            }`}
          >
            {mode === "roast"
              ? "Pr√©pare-toi √† √™tre grill√© sans piti√© !"
              : "Re√ßois des compliments qui vont illuminer ta journ√©e !"}
          </p>

          <div className="max-w-sm mx-auto space-y-2">
            <Label htmlFor="username" className="text-sm text-muted-foreground flex items-center gap-2">
              <User className="w-4 h-4" />
              Pseudo ou pr√©nom (optionnel)
            </Label>
            <Input
              id="username"
              type="text"
              placeholder="Ton nom..."
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className={`text-center transition-all duration-300 hover-lift ${
                mode === "roast" 
                  ? "bg-card/50 border-red-500/30 focus:border-red-400/50 focus:ring-red-400/20" 
                  : "bg-card/50 border-green-500/30 focus:border-green-400/50 focus:ring-green-400/20"
              }`}
            />
          </div>
        </div>

        <div className="flex justify-center">
          <Button
            onClick={() => handleButtonClick(mode)}
            size="lg"
            className={`px-8 py-6 text-lg font-semibold transition-all duration-300 hover:scale-105 hover-lift ${
              mode === "roast"
                ? "bg-red-600 hover:bg-red-700 text-white hover:animate-shake hover-glow animate-pulse-glow"
                : "bg-green-600 hover:bg-green-700 text-white hover:animate-glow hover-glow-green animate-pulse-glow-green"
            }`}
            disabled={isAnimating || isGenerating}
          >
            {isGenerating ? (
              <>
                <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                G√©n√©ration en cours...
              </>
            ) : mode === "roast" ? (
              <>
                <Flame className="w-5 h-5 mr-2" />
                Grille-moi ! üî•
              </>
            ) : (
              <>
                <Heart className="w-5 h-5 mr-2" />
                Complimente-moi ! üíñ
              </>
            )}
          </Button>
        </div>

        {isGenerating && (
          <Card className={`animate-scale-in ${
            mode === "roast" ? "glass-card-roast" : "glass-card-compliment"
          }`}>
            <CardContent className="p-8">
              <div className="flex items-center justify-center gap-4">
                <Loader2 className={`w-8 h-8 animate-spin ${
                  mode === "roast" ? "text-red-400" : "text-green-400"
                }`} />
                <div className="text-center">
                  <p className={`text-lg font-medium neon-text ${
                    mode === "roast" ? "text-red-300" : "text-green-300"
                  }`}>
                    {mode === "roast" ? "üî• G√©n√©ration d'un roast brutal..." : "üíñ Cr√©ation d'un compliment profond..."}
                  </p>
                  <p className="text-sm text-muted-foreground mt-1">
                    L'IA r√©fl√©chit √† la meilleure fa√ßon de {mode === "roast" ? "te d√©truire" : "te valoriser"}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {currentMessage && !isGenerating && (
          <Card
            className={`${isAnimating ? "opacity-50 scale-95" : "animate-bounce-in"} transition-all duration-300 hover-lift ${
              messageType === "roast"
                ? "glass-card-roast"
                : "glass-card-compliment"
            }`}
          >
            <CardContent className="p-8">
              <div className="flex items-start gap-4">
                <div className={`p-3 rounded-full neon-border ${
                  messageType === "roast" 
                    ? "bg-red-500/20 border-red-500/50" 
                    : "bg-green-500/20 border-green-500/50"
                }`}>
                  {messageType === "roast" ? (
                    <Flame className="w-6 h-6 text-red-400 neon-text" />
                  ) : (
                    <Heart className="w-6 h-6 text-green-400 neon-text" />
                  )}
                </div>
                <div className="flex-1">
                  <p className="text-lg text-card-foreground leading-relaxed text-pretty">
                    <TypingText text={currentMessage} speed={30} />
                  </p>

                  <div className="flex gap-2 mt-4">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleReaction(messageId, "like")}
                      className={`transition-all duration-200 ${
                        reactions[messageId] === "like" ? "bg-primary/20 text-primary" : "hover:bg-primary/10"
                      }`}
                    >
                      <ThumbsUp className="w-4 h-4 mr-1" />
                      {reactions[messageId] === "like" ? "Aim√© !" : "J'aime"}
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleReaction(messageId, "dislike")}
                      className={`transition-all duration-200 ${
                        reactions[messageId] === "dislike"
                          ? "bg-destructive/20 text-destructive"
                          : "hover:bg-destructive/10"
                      }`}
                    >
                      <ThumbsDown className="w-4 h-4 mr-1" />
                      {reactions[messageId] === "dislike" ? "Pas aim√©" : "Bof"}
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
      
      {/* Limit Modal */}
      <LimitModal 
        isOpen={showLimitModal}
        onClose={() => setShowLimitModal(false)}
        mode={mode}
      />
    </div>
    </>
  )
}
